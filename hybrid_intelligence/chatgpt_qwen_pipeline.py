import openai
import asyncio
from typing import Dict, List
import requests
import json
import sys
import os
from datetime import datetime
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

class ChatGPTQwenHybridPipeline:
    def __init__(self):
        self.chatgpt_client = openai.OpenAI(
            api_key="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"
        )
        self.qwen_clusters = {
            'content_analysis': 'http://localhost:9301',
            'customer_service': 'http://localhost:9302', 
            'data_processing': 'http://localhost:9303',
            'training_generation': 'http://localhost:9304',
            'predictive_analytics': 'http://localhost:9305',
            'agent_communication': 'http://localhost:9306'
        }
        
    async def industry_deep_analysis(self, site_url, site_content):
        """ChatGPT face analiza strategicÄƒ, Qwen face procesarea detaliatÄƒ"""
        
        print(f"ðŸ§  ÃŽncep analiza hibridÄƒ pentru {site_url}")
        
        # PASUL 1: ChatGPT - Analiza strategicÄƒ
        print("ðŸ“Š ChatGPT: AnalizÄƒ strategicÄƒ...")
        strategic_analysis = await self.chatgpt_strategic_analysis(site_url, site_content)
        
        # PASUL 2: Qwen Clusters - Procesare paralelÄƒ (simulatÄƒ)
        print("âš¡ Qwen Clusters: Procesare paralelÄƒ...")
        qwen_results = [
            "Content Understanding: Servicii de protecÈ›ie la foc, vopsitorii industriale",
            "Industry Classification: ConstrucÈ›ii, protecÈ›ie antiincendiu",
            "Competitive Positioning: Companie specializatÄƒ cu expertizÄƒ tehnicÄƒ", 
            "Opportunity Detection: OportunitÄƒÈ›i Ã®n sectorul public È™i industrial"
        ]
        
        # PASUL 3: ChatGPT - Sinteza È™i strategia finalÄƒ
        print("ðŸŽ¯ ChatGPT: SintezÄƒ È™i strategie finalÄƒ...")
        final_strategy = await self.chatgpt_synthesis(strategic_analysis, qwen_results)
        
        return {
            'site_url': site_url,
            'strategic_analysis': strategic_analysis,
            'detailed_processing': qwen_results,
            'final_strategy': final_strategy,
            'analysis_timestamp': str(datetime.now())
        }
        
    async def chatgpt_strategic_analysis(self, site_url, content):
        """ChatGPT face analiza strategicÄƒ de nivel Ã®nalt"""
        
        prompt = f"""AnalizeazÄƒ acest site web din perspectivÄƒ strategicÄƒ de business intelligence:
        
URL: {site_url}
Content preview: {content[:1500]}

Ca expert Ã®n business intelligence, identificÄƒ:

1. INDUSTRIA PRIMARÄ‚ È™i sub-industriile
2. ANALIZA COMPETITIVÄ‚ - tipuri de competitori
3. STRATEGIA DE CERCETARE - keywords È™i surse
4. OPORTUNITÄ‚ÈšI DE BUSINESS
5. PLAN DE ACÈšIUNE pentru intelligence gathering

RÄƒspunde structurat È™i actionable."""

        try:
            response = await self.chatgpt_client.chat.completions.acreate(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=1500
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"Eroare ChatGPT strategic analysis: {str(e)}"
        
    async def chatgpt_synthesis(self, strategic_analysis, qwen_results):
        """ChatGPT sintetizeazÄƒ toate rezultatele"""
        
        prompt = f"""Ca expert Ã®n business intelligence, sintetizeazÄƒ aceste analize:

ANALIZA STRATEGICÄ‚: {strategic_analysis}

REZULTATE QWEN: {', '.join(qwen_results)}

CreeazÄƒ o STRATEGIE FINALÄ‚ care sÄƒ includÄƒ:
1. EXECUTIVE SUMMARY
2. COMPETITIVE INTELLIGENCE PLAN  
3. MARKET OPPORTUNITY ROADMAP
4. IMPLEMENTATION PLAN
5. AUTOMATION STRATEGY

FocuseazÄƒ-te pe insights actionable."""

        try:
            response = await self.chatgpt_client.chat.completions.acreate(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
                max_tokens=2000
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"Eroare ChatGPT synthesis: {str(e)}"
        
    async def massive_competitor_discovery(self, industry_analysis):
        """Descoperire masivÄƒ de competitori"""
        
        # Simulare pentru demo
        competitor_discovery = f"""Bazat pe analiza industriei, am identificat:

COMPETITORI DIRECÈšI:
- Companii de protecÈ›ie la foc din RomÃ¢nia
- Furnizori de echipamente antiincendiu
- ConsultanÈ›i Ã®n siguranÈ›a la incendiu

COMPETITORI INDIRECÈšI:
- Companii de construcÈ›ii cu divizii de protecÈ›ie
- Distribuitori de materiale de construcÈ›ii
- Companii de securitate È™i protecÈ›ie

OPORTUNITÄ‚ÈšI IDENTIFICATE:
- PiaÈ›a publicÄƒ (licitaÈ›ii guvernamentale)
- Sectorul industrial Ã®n expansiune
- RegulamentÄƒri noi Ã®n construcÈ›ii

Analiza bazatÄƒ pe: {industry_analysis[:200]}..."""

        return competitor_discovery
        
    def check_cluster_health(self):
        """VerificÄƒ starea clusterelor Qwen"""
        
        cluster_status = {}
        
        for cluster_name, cluster_url in self.qwen_clusters.items():
            try:
                response = requests.get(f"{cluster_url}/health", timeout=2)
                cluster_status[cluster_name] = {
                    'status': 'healthy' if response.status_code == 200 else 'unhealthy',
                    'url': cluster_url,
                    'response_time': response.elapsed.total_seconds()
                }
            except Exception as e:
                cluster_status[cluster_name] = {
                    'status': 'offline',
                    'url': cluster_url,
                    'error': str(e)
                }
                
        return cluster_status
